#%% Set-up
import seaborn as sb
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import os 

# Set working directory
path = "."
os.chdir(path)
absolute_path = os.path.abspath(path)

# Load carbon footprints of reference and simplified models
load_=pd.read_excel(os.path.join(absolute_path, "generated_files/Carbon footprint - test cases.xlsx"), sheet_name=["conventional reference model", "conventional simplified model", "enhanced reference model", "enhanced simplified model"], index_col=0, dtype=object)
cge_ref_df= load_["conventional reference model"].melt(var_name="study", value_name="carbon footprint")
cge_s_df= load_["conventional simplified model"].melt(var_name="study", value_name="carbon footprint")
ege_ref_df= load_["enhanced reference model"].melt(var_name="study", value_name="carbon footprint")
ege_s_df= load_["enhanced simplified model"].melt(var_name="study", value_name="carbon footprint")

#%% Conventional 

# Load literature carbon footprints and operational co2 emissions
cge_cfs=pd.read_excel(os.path.join(absolute_path, "data_and_models/Carbon footprints from literature.xlsx"), sheet_name="Conventional", index_col=None, skiprows=1)
cge_cfs=cge_cfs.dropna(subset=["Operational CO2 emissions (g/kWh)"])

cge_s_and_lit_df = pd.DataFrame.merge(cge_s_df, cge_cfs, left_on="study", right_on="Study").drop(columns=["Study", "Notes", "Technology", "Operational CO2 emissions (g/kWh)"])
cge_s_and_lit_df.columns=["study", "simplified model", "literature"]
cge_s_and_lit_df=cge_s_and_lit_df.melt(id_vars="study", var_name="type", value_name="carbon footprint")

cge_study_list = cge_cfs.Study.tolist()

# This script plots carbon footprints from simplified model and from literature as
# categorical variable (ie "dodged") on top of boxplot generated by the reference model
# 
# Stripplot enables categorical plotting of scatterplot
# We need to iterate of axes so that we can change labels and reset legend

f, ax = plt.subplots(2, 4)

for counter, study_ in enumerate(cge_study_list):
    if counter <= 3:
        i= counter
        j=0
    elif counter >3:
        i= counter-4
        j=1
    sb.boxplot(data=cge_ref_df[cge_ref_df.study==study_], x="study", y="carbon footprint", color="white", showfliers=False, ax=ax[j][i])
    sb.stripplot(data=cge_s_and_lit_df[cge_s_and_lit_df.study==study_], x="study", y= "carbon footprint", hue="type", jitter=False, dodge=True, ax=ax[j][i])
    ax[j][i].get_legend().remove()
    ax[j][i].set_xlabel("")
    
    if i != 0:
        ax[j][i].set_ylabel("")
    elif i == 0:
        ax[j][i].set_ylabel(r"$g CO{2} eq./ kWh$")
        
handles, labels = ax[0][0].get_legend_handles_labels()
f.legend(handles, labels, loc='upper center', ncol=2)

#%% Enhanced

# Load literature carbon footprints and operational co2 emissions
ege_cfs=pd.read_excel(os.path.join(absolute_path, "data_and_models/Carbon footprints from literature.xlsx"), sheet_name="Enhanced", index_col=None, skiprows=1, nrows=10)

ege_s_and_lit_df = pd.DataFrame.merge(ege_s_df, ege_cfs, left_on="study", right_on="Study").drop(columns=["Study", "Notes", "Technology", "Diesel consumption (GJ/m)", "Installed capacity (MW)" ])
ege_s_and_lit_df.columns=["study", "simplified model", "literature"]
ege_s_and_lit_df=ege_s_and_lit_df.melt(id_vars="study", var_name="type", value_name="carbon footprint")

ege_study_list = ege_cfs.Study.tolist()

# This script plots carbon footprints from simplified model and from literature as
# categorical variable (ie "dodged") on top of boxplot generated by the reference model
# 
# Stripplot enables categorical plotting of scatterplot
# We need to iterate of axes so that we can change labels and reset legend

f, ax = plt.subplots(2, 5)

for counter, study_ in enumerate(ege_study_list):
    if counter <= 4:
        i= counter
        j=0
    elif counter >4:
        i= counter-5
        j=1
    sb.boxplot(data=ege_ref_df[ege_ref_df.study==study_], x="study", y="carbon footprint", color="white", showfliers=False, ax=ax[j][i])
    sb.stripplot(data=ege_s_and_lit_df[ege_s_and_lit_df.study==study_], x="study", y= "carbon footprint", hue="type", jitter=False, dodge=True, ax=ax[j][i])
    ax[j][i].get_legend().remove()
    ax[j][i].set_xlabel("")
    
    if i != 0:
        ax[j][i].set_ylabel("")
    elif i == 0:
        ax[j][i].set_ylabel(r"$g CO{2} eq./ kWh$")
        
handles, labels = ax[0][0].get_legend_handles_labels()
f.legend(handles, labels, loc='upper center', ncol=2)
